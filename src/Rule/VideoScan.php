<?php

namespace CidiLabs\PhpAlly\Rule;

use CidiLabs\PhpAlly\Video\Vimeo;
use CidiLabs\PhpAlly\Video\Youtube;
use CidiLabs\PhpAlly\Video\Kaltura;

/**
 *	
 */
class VideoScan extends BaseRule
{
    const FAILED_CONNECTION = -1;
    const FAILED_CAPTIONS = 0;
    const SUCCESSFUL_CAPTIONS = 1;
    const NO_API_CREDITS = -2;

    public $youtube = null;
    public $vimeo = null;
    public $kaltura = null;

    public function id()
    {
        return self::class;
    }

    public function check()
    {
        foreach ($this->getAllElements(array('a', 'embed', 'iframe', 'script')) as $video) {
            $attr = ($video->tagName == 'a') ? 'href' : 'src';
            if ($video->hasAttribute($attr)) {
                // Get URL
                $url = $video->getAttribute($attr);
                
                // Get provider (Youtube, Vimeo, or Kaltura class)
                $provider = $this->getVideoProvider($url);                
                if (!$provider) {
                    continue;
                }

                $captions = $this->getCaptionData($url, $provider);

                if (self::NO_API_CREDITS === $captions) {
                    $this->setError('Out of Youtube API credits'); 
                    continue;   
                }

                if (self::FAILED_CONNECTION === $captions) {
                    $this->setError('Failed provider API connection.'); 
                    continue;   
                }

                $this->checkCaptionsExist($captions, $provider, $video);
                $this->checkCaptionsLanguage($captions, $provider, $video);
                $this->checkCaptionsAutoGenerated($captions, $provider, $video);
            }
            $this->totalTests++;

        }

        return count($this->issues);
    }


    /************************
     * Scan rule functions
     ************************/

    // VideosEmbeddedOrLinkedNeedCaptions
    public function checkCaptionsExist($captionData, $provider, $video)
    {
        // Use provider to call 
        if (method_exists($provider, 'captionsMissing')) {
            $captionState = $provider->captionsMissing($captionData);

            if ($captionState != self::SUCCESSFUL_CAPTIONS) {
                $this->setIssue($video, 'VideosEmbeddedOrLinkedNeedCaptions');
            }
        }
    }

    // VideoCaptionsMatchCourseLanguage
    public function checkCaptionsLanguage($captionData, $provider, $video)
    {
        // Use provider to call
        if (method_exists($provider, 'captionsLanguage')) {
            $captionState = $provider->captionsLanguage($captionData);

            if ($captionState != self::SUCCESSFUL_CAPTIONS) {
                $this->setIssue($video, 'VideoCaptionsMatchCourseLanguage');
            }
        }
    }

    // CaptionsAutoGenerated
    public function checkCaptionsAutoGenerated($captionData, $provider, $video)
    {
        // Use provider to call 
        if (method_exists($provider, 'captionsAutoGenerated')) {
            $captionState = $provider->captionsAutoGenerated($captionData);

            if ($captionState != self::SUCCESSFUL_CAPTIONS) {
                $this->setIssue($video, 'VideosHaveAutoGeneratedCaptions');
            }
        }
    }

    // Helpers

    public function getVideoProvider($url)
    {
        $search_youtube = '/(youtube|youtu.be)/';
        $search_vimeo = '/(vimeo)/';
        $search_kaltura = '/(kaltura)/';

        if (preg_match($search_youtube, $url)) {
            if (!isset($this->youtube)) {
                $this->youtube = new Youtube(new \GuzzleHttp\Client(['http_errors' => false]), $this->lang, $this->options['youtubeApiKey']);
            }
            return $this->youtube;
        } elseif (preg_match($search_vimeo, $url)) {
            if (!isset($this->vimeo)) {
                $this->vimeo = new Vimeo(new \GuzzleHttp\Client(['http_errors' => false]), $this->lang, $this->options['vimeoApiKey']);
            }
            return $this->vimeo;
        } else if (preg_match($search_kaltura, $url)) {
            if (!isset($this->kaltura)) {
                $this->kaltura = new Kaltura($this->lang, $this->options['kalturaApiKey'], $this->options['kalturaUsername']);
            }
            return $this->kaltura;
        }

        return null;
    }

    public function getCaptionData($url, $provider)
    {
        if (isset($provider)) {
            return $provider->getVideoData($url);
        }

        return null;
    }
}
