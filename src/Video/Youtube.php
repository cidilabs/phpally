<?php

namespace CidiLabs\PhpAlly\Video;

use GuzzleHttp\Client;

class Youtube
{
	const YOUTUBE_FAILED_REQUEST = -1;
	const YOUTUBE_FAIL = 0;	
	const YOUTUBE_SUCCESS = 1;
	const YOUTUBE_NO_CREDITS = -2;
	const PROVIDER_NAME = 'Youtube';

	private $regex = array(
		'@youtube\.com/embed/([^"\&\? ]+)@i',
		'@youtube\.com/v/([^"\&\? ]+)@i',
		'@youtube\.com/watch\?v=([^"\&\? ]+)@i',
		'@youtube\.com/\?v=([^"\&\? ]+)@i',
		'@youtu\.be/([^"\&\? ]+)@i',
		'@youtu\.be/v/([^"\&\? ]+)@i',
		'@youtu\.be/watch\?v=([^"\&\? ]+)@i',
		'@youtu\.be/\?v=([^"\&\? ]+)@i',
		'@youtube-nocookie\.com/embed/([^"\&\? ]+)@i',
	);

	private $search_url = 'https://www.googleapis.com/youtube/v3/captions?part=snippet&fields=items(snippet(trackKind,language))&videoId=';
	private $client;
	private $language;

	public function __construct(Client $client, $language, $api_key)
	{
		$this->client = $client;
		$this->language = $language;
		$this->api_key = $api_key;
	}

	/**
	 *	Checks to see if a video is missing caption information in YouTube
	 *	@param array $captions 
	 *	@return int
	 */
	public function captionsMissing($captions)
	{
		return (!empty($captions)) ? self::YOUTUBE_SUCCESS : self::YOUTUBE_FAIL;
	}

	/**
	 *	Checks to see if a video is missing caption information in YouTube
	 *	@param array $captions
	 *	@return int 
	 */
	public function captionsAutoGenerated($captions)
	{
		// Looks through the captions and checks if any were not auto-generated
		foreach ($captions as $track) {
			if (strtolower($track->snippet->trackKind) !== 'asr') {
				return self::YOUTUBE_SUCCESS;
			}
		}

		return empty($captions) ? self::YOUTUBE_SUCCESS : self::YOUTUBE_FAIL;
	}

	/**
	 *	Checks to see if a video is missing caption information in YouTube
	 *	@param array $captions
	 *	@return int 
	 */
	public function captionsLanguage($captions)
	{
		$foundManual = false;
		// If for whatever reason course_locale is blank, set it to English
		$course_locale = ($this->language) ? substr(strtolower($this->language), 0, 2) : 'en';

		// Looks through the captions and checks if they are of the correct language
		foreach ($captions as $track) {
			$trackKind = strtolower($track->snippet->trackKind);

			//If the track was manually generated, set the flag to true
			if ($trackKind != 'asr') {
				$foundManual = true;
			}

			if ((substr(strtolower($track->snippet->language), 0, 2) == $course_locale) && ($trackKind != 'asr')) {
				return self::YOUTUBE_SUCCESS;
			}
		}

		//If we found any manual captions and have not returned, then none are the correct language
		if ($foundManual === true) {
			return self::YOUTUBE_FAIL;
		}

		return self::YOUTUBE_SUCCESS;
	}

	/**
	 *	Checks to see if the provided link URL is a YouTube video. If so, it returns
	 *	the video code, if not, it returns null.
	 *	@param string $link_url The URL to the video or video resource
	 *	@return mixed FALSE if it's not a YouTube video, or a string video ID if it is
	 */
	function isYouTubeVideo($link_url)
	{
		$matches = null;
		foreach ($this->regex as $pattern) {
			if (preg_match($pattern, trim($link_url), $matches)) {
				return $matches[1];
			}
		}
		return false;
	}

	/**
	 *	Gets the caption data from the youtube api
	 *	@param string $link_url The URL to the video or video resource
	 *	@return mixed $response Returns response object if api call can be made, null otherwise
	 */
	function getVideoData($link_url)
	{
		$key_trimmed = trim($this->api_key);
		$youtube_id = $this->isYouTubeVideo($link_url);

		if (!$youtube_id || empty($key_trimmed)) {
			return self::YOUTUBE_FAILED_REQUEST;
		}

		$url = $this->search_url . $youtube_id . '&key=' . $this->api_key;
		$response = $this->client->request('GET', $url);

		$result = json_decode($response->getBody());

		// validate response
		if ($response->getStatusCode() >= 400) {
			foreach ($result->error->errors as $error) {
				if ($error->reason === "quotaExceeded") {
					return self::YOUTUBE_NO_CREDITS;
				}
			}
			return self::YOUTUBE_FAILED_REQUEST;
		}

		if (!empty($result->error)) {
			return self::YOUTUBE_FAILED_REQUEST;
		}

		return isset($result->items) ? $result->items : self::YOUTUBE_FAILED_REQUEST;
	}

	public function getName() {
		return self::PROVIDER_NAME;
	}
}
